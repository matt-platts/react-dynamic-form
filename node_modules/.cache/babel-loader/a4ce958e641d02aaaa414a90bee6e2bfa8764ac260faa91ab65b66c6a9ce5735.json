{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Documents/Node/react-app/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport * as React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  /** \"selected\" here is state variable which will hold the \n   * value of currently selected dropdown. \n   */\n  const [selected, setSelected] = React.useState(\"\");\n\n  /** Function that will set different values to state variable \n   * based on which dropdown is selected \n   */\n  const changeSelectOptionHandler = event => {\n    setSelected(event.target.value);\n  };\n\n  /** Different arrays for different dropdowns */\n  const algorithm = [\"Searching Algorithm\", \"Sorting Algorithm\", \"Graph Algorithm\"];\n  const language = [\"C++\", \"Java\", \"Python\", \"C#\"];\n  const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"];\n\n  /** Type variable to store different array for different dropdown */\n  let type = null;\n\n  /** This will be used to create set of options that user will see */\n  let options = null;\n\n  /** Setting Type variable according to dropdown */\n  if (selected === \"Algorithm\") {\n    type = algorithm;\n  } else if (selected === \"Language\") {\n    type = language;\n  } else if (selected === \"Data Structure\") {\n    type = dataStructure;\n  }\n\n  /** If \"Type\" is null or undefined then options will be null, \n   * otherwise it will create a options iterable based on our array \n   */\n  if (type) {\n    options = type.map(el => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: el\n    }, el, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 32\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"16px\",\n      margin: \"16px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: changeSelectOptionHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Choose...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Language\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Data Structure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          children: /** This is where we have used our options variable */\n          options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5JZuWEbSK7gWtQNUHwm+D/HbW5U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","_s","selected","setSelected","useState","changeSelectOptionHandler","event","target","value","algorithm","language","dataStructure","type","options","map","el","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","margin","onChange","_c","$RefreshReg$"],"sources":["/Users/matt/Documents/Node/react-app/my-app/src/App.js"],"sourcesContent":["\nimport * as React from \"react\"; \n  \nconst App = () => { \n  /** \"selected\" here is state variable which will hold the \n   * value of currently selected dropdown. \n   */\n  const [selected, setSelected] = React.useState(\"\"); \n  \n  /** Function that will set different values to state variable \n   * based on which dropdown is selected \n   */\n  const changeSelectOptionHandler = (event) => { \n    setSelected(event.target.value); \n  }; \n  \n  /** Different arrays for different dropdowns */\n  const algorithm = [ \n    \"Searching Algorithm\", \n    \"Sorting Algorithm\", \n    \"Graph Algorithm\", \n  ]; \n  const language = [\"C++\", \"Java\", \"Python\", \"C#\"]; \n  const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"]; \n  \n  /** Type variable to store different array for different dropdown */\n  let type = null; \n  \n  /** This will be used to create set of options that user will see */\n  let options = null; \n  \n  /** Setting Type variable according to dropdown */\n  if (selected === \"Algorithm\") { \n    type = algorithm; \n  } else if (selected === \"Language\") { \n    type = language; \n  } else if (selected === \"Data Structure\") { \n    type = dataStructure; \n  } \n  \n  /** If \"Type\" is null or undefined then options will be null, \n   * otherwise it will create a options iterable based on our array \n   */\n  if (type) { \n    options = type.map((el) => <option key={el}>{el}</option>); \n  } \n  return ( \n    <div \n      style={{ \n        padding: \"16px\", \n        margin: \"16px\", \n      }} \n    > \n      <form> \n        <div> \n          {/** Bind changeSelectOptionHandler to onChange method of select. \n           * This method will trigger every time different \n           * option is selected. \n           */} \n          <select onChange={changeSelectOptionHandler}> \n            <option>Choose...</option> \n            <option>Algorithm</option> \n            <option>Language</option> \n            <option>Data Structure</option> \n          </select> \n        </div> \n        <div> \n          <select> \n            { \n              /** This is where we have used our options variable */\n              options \n            } \n          </select> \n        </div> \n      </form> \n    </div> \n  ); \n}; \n  \nexport default App; \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}